// Code generated by counterfeiter. DO NOT EDIT.
package repofakes

import (
	"context"
	"sync"
	"userregistry/models"
	"userregistry/repo"
)

type FakeUsersRepo struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	GetAllStub        func(context.Context) ([]models.User, error)
	getAllMutex       sync.RWMutex
	getAllArgsForCall []struct {
		arg1 context.Context
	}
	getAllReturns struct {
		result1 []models.User
		result2 error
	}
	getAllReturnsOnCall map[int]struct {
		result1 []models.User
		result2 error
	}
	GetByUserNameStub        func(context.Context, string) (*models.User, error)
	getByUserNameMutex       sync.RWMutex
	getByUserNameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getByUserNameReturns struct {
		result1 *models.User
		result2 error
	}
	getByUserNameReturnsOnCall map[int]struct {
		result1 *models.User
		result2 error
	}
	SaveStub        func(context.Context, *models.User) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		arg1 context.Context
		arg2 *models.User
	}
	saveReturns struct {
		result1 error
	}
	saveReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(context.Context, *models.User, string) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 *models.User
		arg3 string
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUsersRepo) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersRepo) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeUsersRepo) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeUsersRepo) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersRepo) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersRepo) GetAll(arg1 context.Context) ([]models.User, error) {
	fake.getAllMutex.Lock()
	ret, specificReturn := fake.getAllReturnsOnCall[len(fake.getAllArgsForCall)]
	fake.getAllArgsForCall = append(fake.getAllArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetAllStub
	fakeReturns := fake.getAllReturns
	fake.recordInvocation("GetAll", []interface{}{arg1})
	fake.getAllMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersRepo) GetAllCallCount() int {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return len(fake.getAllArgsForCall)
}

func (fake *FakeUsersRepo) GetAllCalls(stub func(context.Context) ([]models.User, error)) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = stub
}

func (fake *FakeUsersRepo) GetAllArgsForCall(i int) context.Context {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	argsForCall := fake.getAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersRepo) GetAllReturns(result1 []models.User, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	fake.getAllReturns = struct {
		result1 []models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersRepo) GetAllReturnsOnCall(i int, result1 []models.User, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	if fake.getAllReturnsOnCall == nil {
		fake.getAllReturnsOnCall = make(map[int]struct {
			result1 []models.User
			result2 error
		})
	}
	fake.getAllReturnsOnCall[i] = struct {
		result1 []models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersRepo) GetByUserName(arg1 context.Context, arg2 string) (*models.User, error) {
	fake.getByUserNameMutex.Lock()
	ret, specificReturn := fake.getByUserNameReturnsOnCall[len(fake.getByUserNameArgsForCall)]
	fake.getByUserNameArgsForCall = append(fake.getByUserNameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetByUserNameStub
	fakeReturns := fake.getByUserNameReturns
	fake.recordInvocation("GetByUserName", []interface{}{arg1, arg2})
	fake.getByUserNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersRepo) GetByUserNameCallCount() int {
	fake.getByUserNameMutex.RLock()
	defer fake.getByUserNameMutex.RUnlock()
	return len(fake.getByUserNameArgsForCall)
}

func (fake *FakeUsersRepo) GetByUserNameCalls(stub func(context.Context, string) (*models.User, error)) {
	fake.getByUserNameMutex.Lock()
	defer fake.getByUserNameMutex.Unlock()
	fake.GetByUserNameStub = stub
}

func (fake *FakeUsersRepo) GetByUserNameArgsForCall(i int) (context.Context, string) {
	fake.getByUserNameMutex.RLock()
	defer fake.getByUserNameMutex.RUnlock()
	argsForCall := fake.getByUserNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersRepo) GetByUserNameReturns(result1 *models.User, result2 error) {
	fake.getByUserNameMutex.Lock()
	defer fake.getByUserNameMutex.Unlock()
	fake.GetByUserNameStub = nil
	fake.getByUserNameReturns = struct {
		result1 *models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersRepo) GetByUserNameReturnsOnCall(i int, result1 *models.User, result2 error) {
	fake.getByUserNameMutex.Lock()
	defer fake.getByUserNameMutex.Unlock()
	fake.GetByUserNameStub = nil
	if fake.getByUserNameReturnsOnCall == nil {
		fake.getByUserNameReturnsOnCall = make(map[int]struct {
			result1 *models.User
			result2 error
		})
	}
	fake.getByUserNameReturnsOnCall[i] = struct {
		result1 *models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersRepo) Save(arg1 context.Context, arg2 *models.User) error {
	fake.saveMutex.Lock()
	ret, specificReturn := fake.saveReturnsOnCall[len(fake.saveArgsForCall)]
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		arg1 context.Context
		arg2 *models.User
	}{arg1, arg2})
	stub := fake.SaveStub
	fakeReturns := fake.saveReturns
	fake.recordInvocation("Save", []interface{}{arg1, arg2})
	fake.saveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersRepo) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeUsersRepo) SaveCalls(stub func(context.Context, *models.User) error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = stub
}

func (fake *FakeUsersRepo) SaveArgsForCall(i int) (context.Context, *models.User) {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	argsForCall := fake.saveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersRepo) SaveReturns(result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersRepo) SaveReturnsOnCall(i int, result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	if fake.saveReturnsOnCall == nil {
		fake.saveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersRepo) Update(arg1 context.Context, arg2 *models.User, arg3 string) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 *models.User
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersRepo) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeUsersRepo) UpdateCalls(stub func(context.Context, *models.User, string) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeUsersRepo) UpdateArgsForCall(i int) (context.Context, *models.User, string) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUsersRepo) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersRepo) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	fake.getByUserNameMutex.RLock()
	defer fake.getByUserNameMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUsersRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repo.UsersRepo = new(FakeUsersRepo)
